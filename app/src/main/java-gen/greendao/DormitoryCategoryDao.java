package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.DormitoryCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DORMITORY_CATEGORY.
*/
public class DormitoryCategoryDao extends AbstractDao<DormitoryCategory, Long> {

    public static final String TABLENAME = "DORMITORY_CATEGORY";

    /**
     * Properties of entity DormitoryCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Dormitory_id = new Property(1, Long.class, "dormitory_id", false, "DORMITORY_ID");
        public final static Property Category_id = new Property(2, Long.class, "category_id", false, "CATEGORY_ID");
    };


    public DormitoryCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public DormitoryCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DORMITORY_CATEGORY' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'DORMITORY_ID' INTEGER," + // 1: dormitory_id
                "'CATEGORY_ID' INTEGER);"); // 2: category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DORMITORY_CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DormitoryCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dormitory_id = entity.getDormitory_id();
        if (dormitory_id != null) {
            stmt.bindLong(2, dormitory_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(3, category_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DormitoryCategory readEntity(Cursor cursor, int offset) {
        DormitoryCategory entity = new DormitoryCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dormitory_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // category_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DormitoryCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDormitory_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategory_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DormitoryCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DormitoryCategory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
