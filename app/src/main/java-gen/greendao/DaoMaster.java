package greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import greendao.UserDao;
import greendao.CaseObjDao;
import greendao.DormitoryDao;
import greendao.BlockDao;
import greendao.LevelDao;
import greendao.RoomDao;
import greendao.CategoryDao;
import greendao.DormitoryCategoryDao;
import greendao.SubCategoryDao;
import greendao.StatusDao;
import greendao.CaseImageDao;
import greendao.CaseSubCategoryDao;
import greendao.CaseActionTakenDao;
import greendao.CaseReferredToDao;
import greendao.StaffDao;
import greendao.WorkerDao;
import greendao.NationalityDao;
import greendao.DiaryTypeDao;
import greendao.DiaryAllDao;
import greendao.DiaryVisitorDao;
import greendao.DiaryShiftDao;
import greendao.DiaryOtherDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserDao.createTable(db, ifNotExists);
        CaseObjDao.createTable(db, ifNotExists);
        DormitoryDao.createTable(db, ifNotExists);
        BlockDao.createTable(db, ifNotExists);
        LevelDao.createTable(db, ifNotExists);
        RoomDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        DormitoryCategoryDao.createTable(db, ifNotExists);
        SubCategoryDao.createTable(db, ifNotExists);
        StatusDao.createTable(db, ifNotExists);
        CaseImageDao.createTable(db, ifNotExists);
        CaseSubCategoryDao.createTable(db, ifNotExists);
        CaseActionTakenDao.createTable(db, ifNotExists);
        CaseReferredToDao.createTable(db, ifNotExists);
        StaffDao.createTable(db, ifNotExists);
        WorkerDao.createTable(db, ifNotExists);
        NationalityDao.createTable(db, ifNotExists);
        DiaryTypeDao.createTable(db, ifNotExists);
        DiaryAllDao.createTable(db, ifNotExists);
        DiaryVisitorDao.createTable(db, ifNotExists);
        DiaryShiftDao.createTable(db, ifNotExists);
        DiaryOtherDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserDao.dropTable(db, ifExists);
        CaseObjDao.dropTable(db, ifExists);
        DormitoryDao.dropTable(db, ifExists);
        BlockDao.dropTable(db, ifExists);
        LevelDao.dropTable(db, ifExists);
        RoomDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        DormitoryCategoryDao.dropTable(db, ifExists);
        SubCategoryDao.dropTable(db, ifExists);
        StatusDao.dropTable(db, ifExists);
        CaseImageDao.dropTable(db, ifExists);
        CaseSubCategoryDao.dropTable(db, ifExists);
        CaseActionTakenDao.dropTable(db, ifExists);
        CaseReferredToDao.dropTable(db, ifExists);
        StaffDao.dropTable(db, ifExists);
        WorkerDao.dropTable(db, ifExists);
        NationalityDao.dropTable(db, ifExists);
        DiaryTypeDao.dropTable(db, ifExists);
        DiaryAllDao.dropTable(db, ifExists);
        DiaryVisitorDao.dropTable(db, ifExists);
        DiaryShiftDao.dropTable(db, ifExists);
        DiaryOtherDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserDao.class);
        registerDaoClass(CaseObjDao.class);
        registerDaoClass(DormitoryDao.class);
        registerDaoClass(BlockDao.class);
        registerDaoClass(LevelDao.class);
        registerDaoClass(RoomDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(DormitoryCategoryDao.class);
        registerDaoClass(SubCategoryDao.class);
        registerDaoClass(StatusDao.class);
        registerDaoClass(CaseImageDao.class);
        registerDaoClass(CaseSubCategoryDao.class);
        registerDaoClass(CaseActionTakenDao.class);
        registerDaoClass(CaseReferredToDao.class);
        registerDaoClass(StaffDao.class);
        registerDaoClass(WorkerDao.class);
        registerDaoClass(NationalityDao.class);
        registerDaoClass(DiaryTypeDao.class);
        registerDaoClass(DiaryAllDao.class);
        registerDaoClass(DiaryVisitorDao.class);
        registerDaoClass(DiaryShiftDao.class);
        registerDaoClass(DiaryOtherDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
