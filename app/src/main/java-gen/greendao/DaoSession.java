package greendao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.User;
import greendao.CaseObj;
import greendao.Dormitory;
import greendao.Block;
import greendao.Level;
import greendao.Room;
import greendao.Category;
import greendao.DormitoryCategory;
import greendao.SubCategory;
import greendao.Status;
import greendao.CaseImage;
import greendao.CaseSubCategory;
import greendao.CaseActionTaken;
import greendao.CaseReferredTo;
import greendao.Staff;
import greendao.Worker;
import greendao.Nationality;
import greendao.DiaryType;
import greendao.DiaryAll;
import greendao.DiaryVisitor;
import greendao.DiaryShift;
import greendao.DiaryOther;

import greendao.UserDao;
import greendao.CaseObjDao;
import greendao.DormitoryDao;
import greendao.BlockDao;
import greendao.LevelDao;
import greendao.RoomDao;
import greendao.CategoryDao;
import greendao.DormitoryCategoryDao;
import greendao.SubCategoryDao;
import greendao.StatusDao;
import greendao.CaseImageDao;
import greendao.CaseSubCategoryDao;
import greendao.CaseActionTakenDao;
import greendao.CaseReferredToDao;
import greendao.StaffDao;
import greendao.WorkerDao;
import greendao.NationalityDao;
import greendao.DiaryTypeDao;
import greendao.DiaryAllDao;
import greendao.DiaryVisitorDao;
import greendao.DiaryShiftDao;
import greendao.DiaryOtherDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig caseObjDaoConfig;
    private final DaoConfig dormitoryDaoConfig;
    private final DaoConfig blockDaoConfig;
    private final DaoConfig levelDaoConfig;
    private final DaoConfig roomDaoConfig;
    private final DaoConfig categoryDaoConfig;
    private final DaoConfig dormitoryCategoryDaoConfig;
    private final DaoConfig subCategoryDaoConfig;
    private final DaoConfig statusDaoConfig;
    private final DaoConfig caseImageDaoConfig;
    private final DaoConfig caseSubCategoryDaoConfig;
    private final DaoConfig caseActionTakenDaoConfig;
    private final DaoConfig caseReferredToDaoConfig;
    private final DaoConfig staffDaoConfig;
    private final DaoConfig workerDaoConfig;
    private final DaoConfig nationalityDaoConfig;
    private final DaoConfig diaryTypeDaoConfig;
    private final DaoConfig diaryAllDaoConfig;
    private final DaoConfig diaryVisitorDaoConfig;
    private final DaoConfig diaryShiftDaoConfig;
    private final DaoConfig diaryOtherDaoConfig;

    private final UserDao userDao;
    private final CaseObjDao caseObjDao;
    private final DormitoryDao dormitoryDao;
    private final BlockDao blockDao;
    private final LevelDao levelDao;
    private final RoomDao roomDao;
    private final CategoryDao categoryDao;
    private final DormitoryCategoryDao dormitoryCategoryDao;
    private final SubCategoryDao subCategoryDao;
    private final StatusDao statusDao;
    private final CaseImageDao caseImageDao;
    private final CaseSubCategoryDao caseSubCategoryDao;
    private final CaseActionTakenDao caseActionTakenDao;
    private final CaseReferredToDao caseReferredToDao;
    private final StaffDao staffDao;
    private final WorkerDao workerDao;
    private final NationalityDao nationalityDao;
    private final DiaryTypeDao diaryTypeDao;
    private final DiaryAllDao diaryAllDao;
    private final DiaryVisitorDao diaryVisitorDao;
    private final DiaryShiftDao diaryShiftDao;
    private final DiaryOtherDao diaryOtherDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        caseObjDaoConfig = daoConfigMap.get(CaseObjDao.class).clone();
        caseObjDaoConfig.initIdentityScope(type);

        dormitoryDaoConfig = daoConfigMap.get(DormitoryDao.class).clone();
        dormitoryDaoConfig.initIdentityScope(type);

        blockDaoConfig = daoConfigMap.get(BlockDao.class).clone();
        blockDaoConfig.initIdentityScope(type);

        levelDaoConfig = daoConfigMap.get(LevelDao.class).clone();
        levelDaoConfig.initIdentityScope(type);

        roomDaoConfig = daoConfigMap.get(RoomDao.class).clone();
        roomDaoConfig.initIdentityScope(type);

        categoryDaoConfig = daoConfigMap.get(CategoryDao.class).clone();
        categoryDaoConfig.initIdentityScope(type);

        dormitoryCategoryDaoConfig = daoConfigMap.get(DormitoryCategoryDao.class).clone();
        dormitoryCategoryDaoConfig.initIdentityScope(type);

        subCategoryDaoConfig = daoConfigMap.get(SubCategoryDao.class).clone();
        subCategoryDaoConfig.initIdentityScope(type);

        statusDaoConfig = daoConfigMap.get(StatusDao.class).clone();
        statusDaoConfig.initIdentityScope(type);

        caseImageDaoConfig = daoConfigMap.get(CaseImageDao.class).clone();
        caseImageDaoConfig.initIdentityScope(type);

        caseSubCategoryDaoConfig = daoConfigMap.get(CaseSubCategoryDao.class).clone();
        caseSubCategoryDaoConfig.initIdentityScope(type);

        caseActionTakenDaoConfig = daoConfigMap.get(CaseActionTakenDao.class).clone();
        caseActionTakenDaoConfig.initIdentityScope(type);

        caseReferredToDaoConfig = daoConfigMap.get(CaseReferredToDao.class).clone();
        caseReferredToDaoConfig.initIdentityScope(type);

        staffDaoConfig = daoConfigMap.get(StaffDao.class).clone();
        staffDaoConfig.initIdentityScope(type);

        workerDaoConfig = daoConfigMap.get(WorkerDao.class).clone();
        workerDaoConfig.initIdentityScope(type);

        nationalityDaoConfig = daoConfigMap.get(NationalityDao.class).clone();
        nationalityDaoConfig.initIdentityScope(type);

        diaryTypeDaoConfig = daoConfigMap.get(DiaryTypeDao.class).clone();
        diaryTypeDaoConfig.initIdentityScope(type);

        diaryAllDaoConfig = daoConfigMap.get(DiaryAllDao.class).clone();
        diaryAllDaoConfig.initIdentityScope(type);

        diaryVisitorDaoConfig = daoConfigMap.get(DiaryVisitorDao.class).clone();
        diaryVisitorDaoConfig.initIdentityScope(type);

        diaryShiftDaoConfig = daoConfigMap.get(DiaryShiftDao.class).clone();
        diaryShiftDaoConfig.initIdentityScope(type);

        diaryOtherDaoConfig = daoConfigMap.get(DiaryOtherDao.class).clone();
        diaryOtherDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        caseObjDao = new CaseObjDao(caseObjDaoConfig, this);
        dormitoryDao = new DormitoryDao(dormitoryDaoConfig, this);
        blockDao = new BlockDao(blockDaoConfig, this);
        levelDao = new LevelDao(levelDaoConfig, this);
        roomDao = new RoomDao(roomDaoConfig, this);
        categoryDao = new CategoryDao(categoryDaoConfig, this);
        dormitoryCategoryDao = new DormitoryCategoryDao(dormitoryCategoryDaoConfig, this);
        subCategoryDao = new SubCategoryDao(subCategoryDaoConfig, this);
        statusDao = new StatusDao(statusDaoConfig, this);
        caseImageDao = new CaseImageDao(caseImageDaoConfig, this);
        caseSubCategoryDao = new CaseSubCategoryDao(caseSubCategoryDaoConfig, this);
        caseActionTakenDao = new CaseActionTakenDao(caseActionTakenDaoConfig, this);
        caseReferredToDao = new CaseReferredToDao(caseReferredToDaoConfig, this);
        staffDao = new StaffDao(staffDaoConfig, this);
        workerDao = new WorkerDao(workerDaoConfig, this);
        nationalityDao = new NationalityDao(nationalityDaoConfig, this);
        diaryTypeDao = new DiaryTypeDao(diaryTypeDaoConfig, this);
        diaryAllDao = new DiaryAllDao(diaryAllDaoConfig, this);
        diaryVisitorDao = new DiaryVisitorDao(diaryVisitorDaoConfig, this);
        diaryShiftDao = new DiaryShiftDao(diaryShiftDaoConfig, this);
        diaryOtherDao = new DiaryOtherDao(diaryOtherDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(CaseObj.class, caseObjDao);
        registerDao(Dormitory.class, dormitoryDao);
        registerDao(Block.class, blockDao);
        registerDao(Level.class, levelDao);
        registerDao(Room.class, roomDao);
        registerDao(Category.class, categoryDao);
        registerDao(DormitoryCategory.class, dormitoryCategoryDao);
        registerDao(SubCategory.class, subCategoryDao);
        registerDao(Status.class, statusDao);
        registerDao(CaseImage.class, caseImageDao);
        registerDao(CaseSubCategory.class, caseSubCategoryDao);
        registerDao(CaseActionTaken.class, caseActionTakenDao);
        registerDao(CaseReferredTo.class, caseReferredToDao);
        registerDao(Staff.class, staffDao);
        registerDao(Worker.class, workerDao);
        registerDao(Nationality.class, nationalityDao);
        registerDao(DiaryType.class, diaryTypeDao);
        registerDao(DiaryAll.class, diaryAllDao);
        registerDao(DiaryVisitor.class, diaryVisitorDao);
        registerDao(DiaryShift.class, diaryShiftDao);
        registerDao(DiaryOther.class, diaryOtherDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        caseObjDaoConfig.getIdentityScope().clear();
        dormitoryDaoConfig.getIdentityScope().clear();
        blockDaoConfig.getIdentityScope().clear();
        levelDaoConfig.getIdentityScope().clear();
        roomDaoConfig.getIdentityScope().clear();
        categoryDaoConfig.getIdentityScope().clear();
        dormitoryCategoryDaoConfig.getIdentityScope().clear();
        subCategoryDaoConfig.getIdentityScope().clear();
        statusDaoConfig.getIdentityScope().clear();
        caseImageDaoConfig.getIdentityScope().clear();
        caseSubCategoryDaoConfig.getIdentityScope().clear();
        caseActionTakenDaoConfig.getIdentityScope().clear();
        caseReferredToDaoConfig.getIdentityScope().clear();
        staffDaoConfig.getIdentityScope().clear();
        workerDaoConfig.getIdentityScope().clear();
        nationalityDaoConfig.getIdentityScope().clear();
        diaryTypeDaoConfig.getIdentityScope().clear();
        diaryAllDaoConfig.getIdentityScope().clear();
        diaryVisitorDaoConfig.getIdentityScope().clear();
        diaryShiftDaoConfig.getIdentityScope().clear();
        diaryOtherDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public CaseObjDao getCaseObjDao() {
        return caseObjDao;
    }

    public DormitoryDao getDormitoryDao() {
        return dormitoryDao;
    }

    public BlockDao getBlockDao() {
        return blockDao;
    }

    public LevelDao getLevelDao() {
        return levelDao;
    }

    public RoomDao getRoomDao() {
        return roomDao;
    }

    public CategoryDao getCategoryDao() {
        return categoryDao;
    }

    public DormitoryCategoryDao getDormitoryCategoryDao() {
        return dormitoryCategoryDao;
    }

    public SubCategoryDao getSubCategoryDao() {
        return subCategoryDao;
    }

    public StatusDao getStatusDao() {
        return statusDao;
    }

    public CaseImageDao getCaseImageDao() {
        return caseImageDao;
    }

    public CaseSubCategoryDao getCaseSubCategoryDao() {
        return caseSubCategoryDao;
    }

    public CaseActionTakenDao getCaseActionTakenDao() {
        return caseActionTakenDao;
    }

    public CaseReferredToDao getCaseReferredToDao() {
        return caseReferredToDao;
    }

    public StaffDao getStaffDao() {
        return staffDao;
    }

    public WorkerDao getWorkerDao() {
        return workerDao;
    }

    public NationalityDao getNationalityDao() {
        return nationalityDao;
    }

    public DiaryTypeDao getDiaryTypeDao() {
        return diaryTypeDao;
    }

    public DiaryAllDao getDiaryAllDao() {
        return diaryAllDao;
    }

    public DiaryVisitorDao getDiaryVisitorDao() {
        return diaryVisitorDao;
    }

    public DiaryShiftDao getDiaryShiftDao() {
        return diaryShiftDao;
    }

    public DiaryOtherDao getDiaryOtherDao() {
        return diaryOtherDao;
    }

}
