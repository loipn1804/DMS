package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Worker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WORKER.
*/
public class WorkerDao extends AbstractDao<Worker, Long> {

    public static final String TABLENAME = "WORKER";

    /**
     * Properties of entity Worker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Nationality_code = new Property(3, String.class, "nationality_code", false, "NATIONALITY_CODE");
        public final static Property Passport = new Property(4, String.class, "passport", false, "PASSPORT");
        public final static Property Expiry = new Property(5, String.class, "expiry", false, "EXPIRY");
        public final static Property Sex = new Property(6, Integer.class, "sex", false, "SEX");
        public final static Property Company = new Property(7, String.class, "company", false, "COMPANY");
        public final static Property Work_permit = new Property(8, String.class, "work_permit", false, "WORK_PERMIT");
        public final static Property Dormitory_id = new Property(9, Long.class, "dormitory_id", false, "DORMITORY_ID");
        public final static Property Block_id = new Property(10, Long.class, "block_id", false, "BLOCK_ID");
        public final static Property Level_id = new Property(11, Long.class, "level_id", false, "LEVEL_ID");
        public final static Property Room_id = new Property(12, Long.class, "room_id", false, "ROOM_ID");
        public final static Property Unit_number = new Property(13, String.class, "unit_number", false, "UNIT_NUMBER");
        public final static Property Image_1 = new Property(14, String.class, "image_1", false, "IMAGE_1");
        public final static Property Image_2 = new Property(15, String.class, "image_2", false, "IMAGE_2");
        public final static Property Image_3 = new Property(16, String.class, "image_3", false, "IMAGE_3");
        public final static Property Created_at = new Property(17, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(18, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Log_message = new Property(19, String.class, "log_message", false, "LOG_MESSAGE");
    };


    public WorkerDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WORKER' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'BARCODE' TEXT," + // 1: barcode
                "'NAME' TEXT," + // 2: name
                "'NATIONALITY_CODE' TEXT," + // 3: nationality_code
                "'PASSPORT' TEXT," + // 4: passport
                "'EXPIRY' TEXT," + // 5: expiry
                "'SEX' INTEGER," + // 6: sex
                "'COMPANY' TEXT," + // 7: company
                "'WORK_PERMIT' TEXT," + // 8: work_permit
                "'DORMITORY_ID' INTEGER," + // 9: dormitory_id
                "'BLOCK_ID' INTEGER," + // 10: block_id
                "'LEVEL_ID' INTEGER," + // 11: level_id
                "'ROOM_ID' INTEGER," + // 12: room_id
                "'UNIT_NUMBER' TEXT," + // 13: unit_number
                "'IMAGE_1' TEXT," + // 14: image_1
                "'IMAGE_2' TEXT," + // 15: image_2
                "'IMAGE_3' TEXT," + // 16: image_3
                "'CREATED_AT' TEXT," + // 17: created_at
                "'UPDATED_AT' TEXT," + // 18: updated_at
                "'LOG_MESSAGE' TEXT);"); // 19: log_message
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WORKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Worker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nationality_code = entity.getNationality_code();
        if (nationality_code != null) {
            stmt.bindString(4, nationality_code);
        }
 
        String passport = entity.getPassport();
        if (passport != null) {
            stmt.bindString(5, passport);
        }
 
        String expiry = entity.getExpiry();
        if (expiry != null) {
            stmt.bindString(6, expiry);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(7, sex);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(8, company);
        }
 
        String work_permit = entity.getWork_permit();
        if (work_permit != null) {
            stmt.bindString(9, work_permit);
        }
 
        Long dormitory_id = entity.getDormitory_id();
        if (dormitory_id != null) {
            stmt.bindLong(10, dormitory_id);
        }
 
        Long block_id = entity.getBlock_id();
        if (block_id != null) {
            stmt.bindLong(11, block_id);
        }
 
        Long level_id = entity.getLevel_id();
        if (level_id != null) {
            stmt.bindLong(12, level_id);
        }
 
        Long room_id = entity.getRoom_id();
        if (room_id != null) {
            stmt.bindLong(13, room_id);
        }
 
        String unit_number = entity.getUnit_number();
        if (unit_number != null) {
            stmt.bindString(14, unit_number);
        }
 
        String image_1 = entity.getImage_1();
        if (image_1 != null) {
            stmt.bindString(15, image_1);
        }
 
        String image_2 = entity.getImage_2();
        if (image_2 != null) {
            stmt.bindString(16, image_2);
        }
 
        String image_3 = entity.getImage_3();
        if (image_3 != null) {
            stmt.bindString(17, image_3);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(18, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(19, updated_at);
        }
 
        String log_message = entity.getLog_message();
        if (log_message != null) {
            stmt.bindString(20, log_message);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Worker readEntity(Cursor cursor, int offset) {
        Worker entity = new Worker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nationality_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // passport
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // expiry
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // company
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // work_permit
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // dormitory_id
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // block_id
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // level_id
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // room_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unit_number
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // image_1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // image_2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // image_3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // created_at
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // updated_at
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // log_message
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Worker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNationality_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassport(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExpiry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCompany(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWork_permit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDormitory_id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setBlock_id(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLevel_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setRoom_id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setUnit_number(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage_1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImage_2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImage_3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreated_at(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpdated_at(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLog_message(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Worker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Worker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
