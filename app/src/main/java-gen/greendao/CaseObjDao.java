package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.CaseObj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CASE_OBJ.
*/
public class CaseObjDao extends AbstractDao<CaseObj, Long> {

    public static final String TABLENAME = "CASE_OBJ";

    /**
     * Properties of entity CaseObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Dormitory_id = new Property(1, Long.class, "dormitory_id", false, "DORMITORY_ID");
        public final static Property Block_id = new Property(2, Long.class, "block_id", false, "BLOCK_ID");
        public final static Property Category_id = new Property(3, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Case_status_id = new Property(4, Long.class, "case_status_id", false, "CASE_STATUS_ID");
        public final static Property Create_by = new Property(5, Long.class, "create_by", false, "CREATE_BY");
        public final static Property Assign_by = new Property(6, Long.class, "assign_by", false, "ASSIGN_BY");
        public final static Property Assign_to = new Property(7, Long.class, "assign_to", false, "ASSIGN_TO");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Created_at = new Property(9, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(10, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Spf_incident = new Property(11, String.class, "spf_incident", false, "SPF_INCIDENT");
        public final static Property Case_investigation_name = new Property(12, String.class, "case_investigation_name", false, "CASE_INVESTIGATION_NAME");
        public final static Property Case_investigation_contact = new Property(13, String.class, "case_investigation_contact", false, "CASE_INVESTIGATION_CONTACT");
        public final static Property Operative_remarks = new Property(14, String.class, "operative_remarks", false, "OPERATIVE_REMARKS");
        public final static Property Government_agencies = new Property(15, String.class, "government_agencies", false, "GOVERNMENT_AGENCIES");
        public final static Property Head_ops_assessment = new Property(16, String.class, "head_ops_assessment", false, "HEAD_OPS_ASSESSMENT");
        public final static Property Follow_up_timeline = new Property(17, String.class, "follow_up_timeline", false, "FOLLOW_UP_TIMELINE");
        public final static Property Assign_to_name = new Property(18, String.class, "assign_to_name", false, "ASSIGN_TO_NAME");
        public final static Property Create_by_name = new Property(19, String.class, "create_by_name", false, "CREATE_BY_NAME");
    };


    public CaseObjDao(DaoConfig config) {
        super(config);
    }
    
    public CaseObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CASE_OBJ' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'DORMITORY_ID' INTEGER," + // 1: dormitory_id
                "'BLOCK_ID' INTEGER," + // 2: block_id
                "'CATEGORY_ID' INTEGER," + // 3: category_id
                "'CASE_STATUS_ID' INTEGER," + // 4: case_status_id
                "'CREATE_BY' INTEGER," + // 5: create_by
                "'ASSIGN_BY' INTEGER," + // 6: assign_by
                "'ASSIGN_TO' INTEGER," + // 7: assign_to
                "'CONTENT' TEXT," + // 8: content
                "'CREATED_AT' TEXT," + // 9: created_at
                "'UPDATED_AT' TEXT," + // 10: updated_at
                "'SPF_INCIDENT' TEXT," + // 11: spf_incident
                "'CASE_INVESTIGATION_NAME' TEXT," + // 12: case_investigation_name
                "'CASE_INVESTIGATION_CONTACT' TEXT," + // 13: case_investigation_contact
                "'OPERATIVE_REMARKS' TEXT," + // 14: operative_remarks
                "'GOVERNMENT_AGENCIES' TEXT," + // 15: government_agencies
                "'HEAD_OPS_ASSESSMENT' TEXT," + // 16: head_ops_assessment
                "'FOLLOW_UP_TIMELINE' TEXT," + // 17: follow_up_timeline
                "'ASSIGN_TO_NAME' TEXT," + // 18: assign_to_name
                "'CREATE_BY_NAME' TEXT);"); // 19: create_by_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CASE_OBJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CaseObj entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dormitory_id = entity.getDormitory_id();
        if (dormitory_id != null) {
            stmt.bindLong(2, dormitory_id);
        }
 
        Long block_id = entity.getBlock_id();
        if (block_id != null) {
            stmt.bindLong(3, block_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(4, category_id);
        }
 
        Long case_status_id = entity.getCase_status_id();
        if (case_status_id != null) {
            stmt.bindLong(5, case_status_id);
        }
 
        Long create_by = entity.getCreate_by();
        if (create_by != null) {
            stmt.bindLong(6, create_by);
        }
 
        Long assign_by = entity.getAssign_by();
        if (assign_by != null) {
            stmt.bindLong(7, assign_by);
        }
 
        Long assign_to = entity.getAssign_to();
        if (assign_to != null) {
            stmt.bindLong(8, assign_to);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(10, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(11, updated_at);
        }
 
        String spf_incident = entity.getSpf_incident();
        if (spf_incident != null) {
            stmt.bindString(12, spf_incident);
        }
 
        String case_investigation_name = entity.getCase_investigation_name();
        if (case_investigation_name != null) {
            stmt.bindString(13, case_investigation_name);
        }
 
        String case_investigation_contact = entity.getCase_investigation_contact();
        if (case_investigation_contact != null) {
            stmt.bindString(14, case_investigation_contact);
        }
 
        String operative_remarks = entity.getOperative_remarks();
        if (operative_remarks != null) {
            stmt.bindString(15, operative_remarks);
        }
 
        String government_agencies = entity.getGovernment_agencies();
        if (government_agencies != null) {
            stmt.bindString(16, government_agencies);
        }
 
        String head_ops_assessment = entity.getHead_ops_assessment();
        if (head_ops_assessment != null) {
            stmt.bindString(17, head_ops_assessment);
        }
 
        String follow_up_timeline = entity.getFollow_up_timeline();
        if (follow_up_timeline != null) {
            stmt.bindString(18, follow_up_timeline);
        }
 
        String assign_to_name = entity.getAssign_to_name();
        if (assign_to_name != null) {
            stmt.bindString(19, assign_to_name);
        }
 
        String create_by_name = entity.getCreate_by_name();
        if (create_by_name != null) {
            stmt.bindString(20, create_by_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CaseObj readEntity(Cursor cursor, int offset) {
        CaseObj entity = new CaseObj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dormitory_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // block_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // category_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // case_status_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // create_by
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // assign_by
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // assign_to
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // created_at
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updated_at
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // spf_incident
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // case_investigation_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // case_investigation_contact
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // operative_remarks
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // government_agencies
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // head_ops_assessment
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // follow_up_timeline
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // assign_to_name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // create_by_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CaseObj entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDormitory_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBlock_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCategory_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCase_status_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreate_by(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAssign_by(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAssign_to(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdated_at(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpf_incident(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCase_investigation_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCase_investigation_contact(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOperative_remarks(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGovernment_agencies(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHead_ops_assessment(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFollow_up_timeline(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAssign_to_name(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreate_by_name(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CaseObj entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CaseObj entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
